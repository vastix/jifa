//=========================================================================
//
//  This file was generated by Mouse 1.7 at 2015-09-07 12:49:34 GMT
//  from grammar
//    '/home/bpdp/kerjaan/git-repos/vastix/jifa/src/test/grammar/JifaGramma
//    r.peg'.
//
//=========================================================================

import mouse.runtime.Source;

public class JifaParser extends mouse.runtime.ParserBase
{
  final JifaSemantics sem;
  
  //=======================================================================
  //
  //  Initialization
  //
  //=======================================================================
  //-------------------------------------------------------------------
  //  Constructor
  //-------------------------------------------------------------------
  public JifaParser()
    {
      sem = new JifaSemantics();
      sem.rule = this;
      super.sem = sem;
    }
  
  //-------------------------------------------------------------------
  //  Run the parser
  //-------------------------------------------------------------------
  public boolean parse(Source src)
    {
      super.init(src);
      sem.init();
      boolean result = Input();
      closeParser(result);
      return result;
    }
  
  //-------------------------------------------------------------------
  //  Get semantics
  //-------------------------------------------------------------------
  public JifaSemantics semantics()
    { return sem; }
  
  //=======================================================================
  //
  //  Parsing procedures
  //
  //=======================================================================
  //=====================================================================
  //  Input = [\n\r]* Line++ EOF ;
  //=====================================================================
  private boolean Input()
    {
      begin("Input");
      while (nextIn("\n\r"));
      if (EOF()) return reject();
      do if (!Line()) return reject();
        while (!EOF());
      return accept();
    }
  
  //=====================================================================
  //  Line = Space / Lcase / Ucase / Digits ;
  //=====================================================================
  private boolean Line()
    {
      begin("Line");
      if (Space()) return accept();
      if (Lcase()) return accept();
      if (Ucase()) return accept();
      if (Digits()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  Space = " " ;
  //=====================================================================
  private boolean Space()
    {
      begin("Space");
      if (!next(' ')) return reject();
      return accept();
    }
  
  //=====================================================================
  //  Lcase = [a-z]+ ;
  //=====================================================================
  private boolean Lcase()
    {
      begin("Lcase");
      if (!nextIn('a','z')) return reject();
      while (nextIn('a','z'));
      return accept();
    }
  
  //=====================================================================
  //  Ucase = [A-Z]+ ;
  //=====================================================================
  private boolean Ucase()
    {
      begin("Ucase");
      if (!nextIn('A','Z')) return reject();
      while (nextIn('A','Z'));
      return accept();
    }
  
  //=====================================================================
  //  Digits = [0-9]+ ;
  //=====================================================================
  private boolean Digits()
    {
      begin("Digits");
      if (!nextIn('0','9')) return reject();
      while (nextIn('0','9'));
      return accept();
    }
  
  //=====================================================================
  //  EOF = !_ <end of file> ;
  //=====================================================================
  private boolean EOF()
    {
      begin("EOF","end of file");
      if (!aheadNot()) return reject();
      return accept();
    }
  
}
