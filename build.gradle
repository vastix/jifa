buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1',
            'com.github.jengelman.gradle.plugins:shadow:1.2.1'
            // asciidoc gradle plugin
            // http://asciidoctor.org/docs/asciidoctor-gradle-plugin/
            // abandon 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
    }
}

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'
// asciidoc - for documentaton
// sourceDir	
// 		where the asciidoc sources are. Type: File. Default: src/asciidoc.
//
// sourceDocumentNames	
// 		an override to process multiple source files, which may be a subset 
//		of all files available in ${sourceDir}. Type: FileCollection. 
//		Defaults to all files in ${sourceDir}.
//apply plugin: 'org.asciidoctor.convert'
apply plugin: 'application'

def vertxVersion = '3.0.0'
version = '1.0.0'

sourceCompatibility = 1.8 
targetCompatibility = 1.8

if (!JavaVersion.current().java8Compatible) {
	throw new IllegalStateException(
            '''A Haiku:
            |   This needs Java 8,
            |   You are using something else,
            |   Refresh. Try again.
            '''.stripMargin())
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'name.bpdp.weberia'
            artifactId 'jifa'
            version '1.0.0'
            from components.java
        }
    }
}


repositories {
    mavenCentral()
    maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
    jcenter()
    mavenLocal()
    // uncomment for unmanaged deps
    //flatDir {
    //    dirs 'lib'
    //}
}

dependencies {
    compile 'io.vertx:vertx-core:' + vertxVersion
    // uncomment for unmanaged deps
    // compile fileTree(dir: 'lib', include: '*.jar')
    antlr "org.antlr:antlr4:4.5"
    testCompile 'junit:junit:4.12'
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Class': 'name.bpdp.weberia.jifa.Jifa'
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

mainClassName = 'name.bpdp.weberia.jifa.Jifa'

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
}